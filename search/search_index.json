{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-my-documentation-space","title":"Welcome to my documentation space","text":"<p>Here I'll have various snippets of code and documentation on my homelab journey and all things IT/DT</p> <p>I like getting my hands into docker containers and applications for specific scenarios.</p> <p>Take a look around and you could find something interesting!</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2023/10/13/ssh-tunneling-for-easy-access-to-web-based-apps-form-servers/","title":"SSH Tunneling for easy access to web-based apps form servers","text":"<p>I had to access Portainer in my cloud VM to modify docker containers. I can access it now via any web browser with SSL (https) no problem, but this way is good in a pinch </p> <p>Run this command in your local machine:</p> <pre><code>ssh -L 9000:127.0.0.1:9000 my_user@my-remote-server\n</code></pre> <p>This will forward port 9000 to our local machine:</p> <p>http://localhost:9000 or http://127.0.0.1:9000</p> <p>At this local address the Portainer web UI from the remote server will appear.</p> <p>Nice and neat little SSH trick! </p>","tags":["linux"]},{"location":"blog/2024/10/13/fix-your-slow-origin-games-download-speeds--updated/","title":"Fix your SLOW Origin Games download speeds \u2013 UPDATED","text":"<p>Note</p> <p>UPDATE 2023.10.13 - This post is here just for history's sake as Origin is basically deprecated at this point in time. It's always nice to keep history though.  </p> <p>UPDATE 2021.08.20 \u2013 This is a non-issue for me anymore although now I personally use EA Desktop with the Xbox Game Pass for PC. I have Origin installed but have not used it directly anymore since.</p> <p>ORIGINAL POST BELOW:</p> <p>Origin can be a bit sluggish at times. But we have to live with it no matter what (for now maybe? who knows).</p> <p>Recently I was downloading the latest patch for Apex Legends. But when I saw my client downloading @ 2.5 MB/s on a 70 Mbps connection, I got intrigued to say the least. Mad could be a better description of the moment. I could get up to 8.75 MB/s on that connection theoretically. I use a 1 GBps wired connection for the computer to my router and also a 1 GBps wired connection from said router to the cable company modem. This is a best case scenario for Origin.</p> <p>I got into research overdrive that night. Looking over all the internet to find how to fix this. Some reddit posts and forum replies later\u2026 I came across this HUGE post on answers.ea.com which has been running for almost 3 years now. People very mad and trying all kind of methods to try to squeeze the most out of their connection. Looking to get better download speeds on Origin to get their games and updates.</p> <p>There was no good fix for this.</p> <p>So I searched deeper and found this little snippet of information from the site https://www.pcgamingwiki.com/. The post section, which you can read here, is in regards to resolving an issue where the Origin client suddenly stops downloading mid-download. But says it has been reported to improve the download speeds also.</p> <p>Mod hat ON!</p> <p>The excerpt from the site is here for your convenience. Very easy steps:</p> <ul> <li>Exit Origin</li> <li>Create a new empty document on your desktop</li> <li>Enter the following text in the file:</li> </ul> <pre><code>[connection]\nEnvironmentName=production\n\n[Feature]\nCdnOverride=akamai\n</code></pre> <ul> <li>Save the file as EACore.ini.</li> <li>Now start Origin.</li> </ul> <p>Upon start you will be asked if you want to import the file you just created on your desktop. Press Yes. This will overwrite your old config-file.</p>","tags":["origin","gaming"]},{"location":"blog/2024/10/13/fix-your-slow-origin-games-download-speeds--updated/#note","title":"Note","text":"<ul> <li>The EACore.ini file is deleted from your desktop as soon as you import it. If you ever want to leave R&amp;D mode you need to go to the location where Origin is installed and delete the EACore.ini file found there.</li> </ul> <p>It has been reported that having Origin in R&amp;D-mode will increase your download speed. This made a huge change for me. The Origin client started with a display of \u201cR&amp;D | PR\u201d in the upper right corner. Then trying the remainder of the patch download I was amazed to see 8.83 MB/s of download speed in Origin.</p> <p>As a note, I also use Google Public DNS in my gaming computer. That is DNS servers:</p> <p>8.8.8.8 and 8.8.4.4</p> <p>The patch just took a couple of minutes to download this time. Hope this helps someone out there.</p>","tags":["origin","gaming"]},{"location":"blog/2024/10/28/ntfy-notifications-from-unraid-using-curl/","title":"ntfy notifications from unRAID using curl","text":"<pre><code>#!/bin/bash\nOUTPUT=$(docker image prune -af | tail -1)\ntopicurl=https://ntfy.example.com/topic\n\ncurl --insecure \\\n  -d \"$OUTPUT\" \\\n  -H \"Title: Dangling images cleaned on $(hostname)\" \\\n  $topicurl\n</code></pre>","tags":["ntfy"]},{"location":"blog/2024/02/08/mount-an-smb-share-and-use-igpu-on-an-unprivileged-debian-12-lxc-container-in-proxmox/","title":"Mount an SMB share and use iGPU on an unprivileged Debian 12 LXC container in Proxmox","text":"","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/02/08/mount-an-smb-share-and-use-igpu-on-an-unprivileged-debian-12-lxc-container-in-proxmox/#pre-requisites","title":"Pre-requisites:","text":"<p>Create an unprivileged Debian 12 LXC container.</p> <p>Inside the LXC container, use the <code>root</code> user to create a non-root user with your name. In the case of mine I wanted to add it to the <code>sudo</code> and <code>docker</code> groups after installing Docker inside the LXC container.</p> <pre><code>useradd -s /bin/bash -m -G sudo,docker ismael\n</code></pre> <p>Change the user password to whatever you need.</p> <pre><code>su ismael\npasswd\n</code></pre> <p>This user's default <code>UID:GID</code> will be <code>1000:1000</code>. If not, create it with:</p> <pre><code>useradd ismael -u 1000 -g 1000 -m -s /bin/bash -G sudo,docker\n</code></pre> <p>Take note of this <code>UID:GID</code> as we'll use it to map the share in Proxmox. The share itself can be on another system. We'll mount it soon. I use an Unraid VM in this same host for this.</p>","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/02/08/mount-an-smb-share-and-use-igpu-on-an-unprivileged-debian-12-lxc-container-in-proxmox/#smb-share","title":"SMB share","text":"","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/02/08/mount-an-smb-share-and-use-igpu-on-an-unprivileged-debian-12-lxc-container-in-proxmox/#in-the-proxmox-host","title":"In the Proxmox host","text":"<p>We'll create a user that can be mapped from the host to the LXC container. If we don't do this step, we'll end up with just read access inside the LXC container.</p> <p>Proxmox maps the users and groups from the host to the LXC containers starting at <code>UID:GID</code>=<code>100000:100000</code>.</p> <p>The created <code>ismael</code> user then:</p> <ul> <li>Inside the LXC container UID: 1000</li> <li>Inside the host UID: 101000</li> </ul> <p>Create a group on the host with GID=101000 that will own the directory we'll create for the SMB share</p> <pre><code>groupadd -g 101000 ismael\n</code></pre> <p>Create the same user that we'll use inside the LXC container but with the right <code>UID:GID</code> combination</p> <pre><code>useradd ismael -u 101000 -g 101000 -m -s /bin/bash\n</code></pre> <p>Make a directory for the share</p> <pre><code>mkdir /mnt/media\n</code></pre> <p>Change said directory's owner to the previously created user</p> <pre><code>chown ismael:ismael /mnt/media\n</code></pre> <p>Modify the <code>/etc/fstab</code> file to mount the SMB share on the directory we created</p> <pre><code>nano /etc/fstab\n</code></pre> <p>Copy this line inside the nano editor for <code>/etc/fstab</code> (note the <code>guest</code> part as my SMB share does not have a password set)</p> <pre><code>//192.168.0.10/media /mnt/media cifs guest,rw,uid=1000,gid=1000,file_mode=0777,dir_mode=0777 0 0\n</code></pre> <p>If you use a password for your share</p> <pre><code>//192.168.0.10/media /mnt/media cifs username=&lt;username&gt;,password=&lt;password&gt;,rw,uid=1000,gid=1000,file_mode=0777,dir_mode=0777 0 0\n</code></pre> <p>Reload the changes to /etc/fstab before mounting</p> <pre><code>systemctl daemon-reload\nmount -a\n</code></pre> <p>Create a mountpoint in your LXC container pointing to the created share directory</p> <pre><code>pct set 104 -mp0 /mnt/media,mp=/mnt/user/media\n</code></pre> <p>Start your LXC container and the share will be mounted in <code>/mnt/user/media</code> and you should be able to write to it!</p>","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/02/08/mount-an-smb-share-and-use-igpu-on-an-unprivileged-debian-12-lxc-container-in-proxmox/#igpu","title":"iGPU","text":"<p>Coming soon...</p>","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/01/10/proxmox--automatically-restore-smbcifs-share-connections/","title":"Proxmox | automatically restore SMB/CIFS share connections","text":"<p>If at some point Proxmox loses connectivity with an SMB/CIFS share, it will not restore the connection by itself until a restart of the Proxmox node is performed.</p> <p>With this tip, you\u2019ll make the Proxmox node restore the connection automatically.</p> <p>In your node\u2019s shell, create a bash script that looks for mount points in <code>/mnt/pve/</code> and unmounts them if they become stale:</p> <pre><code>nano remount.sh\n</code></pre> <p>Put this content into the file:</p> <pre><code>#!/bin/bash\nlist=$(ls /mnt/pve)\n\nfor i in $list\ndo\n        status=$(ls /mnt/pve/$i 2&gt;&amp;1)\n\n        if [[ $status =~ .*Stale.* ]]\n                then\n                umount /mnt/pve/$i\n        fi\ndone\n</code></pre> <p>Remember to make the script executable by the user creating it:</p> <p>chmod 766 /root/remount.sh Add a cron job for this script to run automatically:</p> <pre><code>* * * * * /root/remount.sh &gt;/dev/null 2&gt;&amp;1\n</code></pre> <p>With that, any SMB/CIFS connections should be restored automatically. That is because the service <code>pvestatd</code> tries to remount every SMB share every 10 seconds.</p> <p>This approach could work for NFS shares too. I have not tested that possibility.</p>","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/02/08/mount-an-smb-share-and-use-igpu-on-an-unprivileged-debian-12-lxc-container-in-proxmox/","title":"Mount an SMB share and use iGPU on an unprivileged Debian 12 LXC container in Proxmox","text":"","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/02/08/mount-an-smb-share-and-use-igpu-on-an-unprivileged-debian-12-lxc-container-in-proxmox/#procedure","title":"Procedure","text":"<p>Prerequisites:</p> <p>Create an unprivileged Debian 12 LXC container.</p> <p>Inside the LXC container, use the <code>root</code> user to create a non-root user with your name. In the case of mine I wanted to add it to the <code>sudo</code> and <code>docker</code> groups after installing Docker inside the LXC container.</p> <pre><code>useradd -s /bin/bash -m -G sudo,docker ismael\n</code></pre> <p>Change the user password to whatever you need.</p> <pre><code>su ismael\npasswd\n</code></pre> <p>This user's default <code>UID:GID</code> will be <code>1000:1000</code>. If not, create it with:</p> <pre><code>useradd ismael -u 1000 -g 1000 -m -s /bin/bash -G sudo,docker\n</code></pre> <p>Take note of this <code>UID:GID</code> as we'll use it to map the share in Proxmox. The share itself can be on another system. We'll mount it soon. I use an Unraid VM in this same host for this.</p>","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/02/08/mount-an-smb-share-and-use-igpu-on-an-unprivileged-debian-12-lxc-container-in-proxmox/#smb-share","title":"SMB share","text":"","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/02/08/mount-an-smb-share-and-use-igpu-on-an-unprivileged-debian-12-lxc-container-in-proxmox/#in-the-proxmox-host","title":"In the Proxmox host","text":"<p>We'll create a user that can be mapped from the host to the LXC container. If we don't do this step, we'll end up with just read access inside the LXC container.</p> <p>Proxmox maps the users and groups from the host to the LXC containers starting at <code>UID:GID</code>=<code>100000:100000</code>.</p> <p>The created <code>ismael</code> user then:</p> <ul> <li>Inside the LXC container UID: 1000</li> <li>Inside the host UID: 101000</li> </ul> <p>Create a group on the host with GID=101000 that will own the directory we'll create for the SMB share</p> <pre><code>groupadd -g 101000 ismael\n</code></pre> <p>Create the same user that we'll use inside the LXC container but with the right <code>UID:GID</code> combination</p> <pre><code>useradd ismael -u 101000 -g 101000 -m -s /bin/bash\n</code></pre> <p>Make a directory for the share</p> <pre><code>mkdir /mnt/media\n</code></pre> <p>Change said directory's owner to the previously created user</p> <pre><code>chown ismael:ismael /mnt/media\n</code></pre> <p>Modify the <code>/etc/fstab</code> file to mount the SMB share on the directory we created</p> <pre><code>nano /etc/fstab\n</code></pre> <p>Copy this line inside the nano editor for <code>/etc/fstab</code> (note the <code>guest</code> part as my SMB share does not have a password set)</p> <pre><code>//192.168.0.10/media /mnt/media cifs guest,rw,uid=1000,gid=1000,file_mode=0777,dir_mode=0777 0 0\n</code></pre> <p>If you use a password for your share</p> <pre><code>//192.168.0.10/media /mnt/media cifs username=&lt;username&gt;,password=&lt;password&gt;,rw,uid=1000,gid=1000,file_mode=0777,dir_mode=0777 0 0\n</code></pre> <p>Reload the changes to /etc/fstab before mounting</p> <pre><code>systemctl daemon-reload\nmount -a\n</code></pre> <p>Create a mountpoint in your LXC container pointing to the created share directory</p> <pre><code>pct set 104 -mp0 /mnt/media,mp=/mnt/user/media\n</code></pre> <p>Start your LXC container and the share will be mounted in <code>/mnt/user/media</code> and you should be able to write to it!</p>","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/02/08/mount-an-smb-share-and-use-igpu-on-an-unprivileged-debian-12-lxc-container-in-proxmox/#igpu","title":"iGPU","text":"<p>Coming soon...</p>","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/11/29/run-a-powershell-ps1-script-hidden-from-view-and-scheduled-on-task-scheduler-for-windows/","title":"run a powershell ps1 script hidden from view and scheduled on Task Scheduler for Windows","text":"","tags":["windows","powershell"]},{"location":"blog/2024/11/29/run-a-powershell-ps1-script-hidden-from-view-and-scheduled-on-task-scheduler-for-windows/#the-script-launcher","title":"The script launcher","text":"<p>We need a script launcher as PowerShell scripts run in the foreground and we don't want the window of this script to appear at all.</p> <p>This one can be a <code>.vbs</code> file that will be setup like this - In Task Scheduler     - Action: Start a program     - Program/script: <code>wscript</code>     - Add arguments (optional): <code>&lt;path\\to\\the\\.ps1\\file&gt;</code></p> <p>Here is the <code>.vbs</code> script:</p> <pre><code>command = \"powershell.exe \u00a0-ExecutionPolicy Bypass \u00a0C:\\Users\\Ismael\\Documents\\GitHub\\djismgaming.github.io\\blogupdate.ps1\"\n\nset shell = CreateObject(\"WScript.Shell\")\n\nshell.Run command,0\n</code></pre>","tags":["windows","powershell"]},{"location":"blog/2023/10/13/speedtouch-modem-as-a-router/","title":"speedtouch modem as a router","text":"<p>A speedtouch modem, like a 2007 model Thompson Speedtouch 585V6, is a DSL modem. But with a little tweak, it can be used as a router for your network.</p> <p>Run these commands towards the SpeedTouch modem using <code>telnet</code>:</p> <pre><code>telnet &lt;modem ip address&gt;\n</code></pre> <p>Commands to set up a SpeedTouch DSL modem as a router:</p> <p>For firmware versions 5.3 and lower:</p> <pre><code>ppp relay flush\nppp flush\neth flush\natm flush\natm phonebook flush\neth bridge ifdelete intf=ethport4\neth ifadd intf=ethport4\neth ifconfig intf=ethport4 dest=ethif4 retry=10 group=default\neth ifattach intf=ethport4\nip ifadd intf=WAN_Port dest=ethport4\nip ifconfig intf=WAN_Port hwaddr=00:11:42:0c:65:1d # This line is needed if MAC address cloning is required, otherwise it's not necessary\ndhcp client ifadd intf=WAN_Port\ndhcp client ifattach intf=WAN_Port\nnat ifconfig intf=WAN_Port translation=enabled\nnat ifattach intf=WAN_Port\nsaveall\n</code></pre> <p>For firmware versions 6.1 and higher:</p> <pre><code>ppp relay flush\nppp flush\neth flush\natm flush\natm phonebook flush\neth bridge ifdelete intf=ethport4\neth ifadd intf=eth_wan\neth ifconfig intf=eth_wan dest=ethif4\neth ifattach intf=eth_wan\nip ifadd intf=ip_wan_eth dest=eth_wan\nip ifconfig intf=ip_wan_eth status=up\nip ifconfig intf=ip_wan_eth hwaddr=00:11:42:0c:65:1d # This line is needed if MAC address cloning is required, otherwise it's not necessary\nip ifattach intf=ip_wan_eth\nnat ifconfig intf=ip_wan_eth translation=enabled\ndhcp client ifadd intf=ip_wan_eth\ndhcp client ifconfig intf=ip_wan_eth metric=5 dnsmetric=5\ndhcp client rqoptions and intf=ip_wan_eth option=dhcp-lease-time\ndhcp client rqoptions and intf=ip_wan_eth option=dhcp-renewal-time\ndhcp client rqoptions and intf=ip_wan_eth option=dhcp-rebinding-time\ndhcp client rqoptions and intf=ip_wan_eth option=subnet-mask\ndhcp client rqoptions and intf=ip_wan_eth option=classless-static-routes\ndhcp client rqoptions and intf=ip_wan_eth option=default-routers\ndhcp client rqoptions and intf=ip_wan_eth option=classfull-static-routes\ndhcp client rqoptions and intf=ip_wan_eth option=domain-name-servers\ndhcp client ifattach intf=ip_wan_eth\nsaveall\n</code></pre>","tags":["linux","networking","hardware","hardware","hacking","routers"]},{"location":"blog/2023/10/18/set-up-your-ssh-key-based-authentication-from-windows-in-a-single-line/","title":"Set up your SSH key-based authentication from Windows in a single line","text":"<p>Using Linux directly to interact with Linux servers is pretty great and seamless. But when your daily driver is Windows, this can be a little more cumbersome.</p> <p>For instance, when connecting with the Windows version of OpenSSH there is a way to copy your generated key for simple password-less logins after that.</p>","tags":["linux","windows","ssh"]},{"location":"blog/2023/10/18/set-up-your-ssh-key-based-authentication-from-windows-in-a-single-line/#generate-your-private-and-public-keys-in-your-windows-powershell-shell","title":"Generate your private and public keys in your Windows PowerShell shell","text":"<p>Execute the command below in Windows Terminal or any other terminal in Windows:</p> <pre><code>ssh-keygen\n</code></pre> <p>This one will generate the necessary keys in your local host. These will be located in your Windows profile directory under the <code>.ssh/</code> sub-directory.</p> <p>You can access it in this location on Windows by using the key combination <code>Win + R</code> and then entering this text in the Run window:</p> <pre><code>%userprofile%/.ssh/\n</code></pre> <p>That directory will include: - your generated private key <code>id_rsa</code> - your generated public key <code>id_rsa.pub</code></p> <p>The public key is the one we'll copy into any remote host we want to connect without using a password.</p>","tags":["linux","windows","ssh"]},{"location":"blog/2023/10/18/set-up-your-ssh-key-based-authentication-from-windows-in-a-single-line/#now-comes-the-single-line-i-talked-about-in-the-title","title":"Now comes the single line I talked about in the title!","text":"<p>Using the command below will make the same process like ssh-copy-id would but working with the OpenSSH in Windows. This will copy your SSH keys into the remote host.</p> <p>I use the Windows Terminal for this process. Just edit the line with your data. Specifically change the part <code>user@host.address</code> with your correct remote user and host IP/hostname.</p> <pre><code>type .ssh\\id_rsa.pub | ssh user@host.address \"mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys\"\n</code></pre> <p>This makes it possible to login directly to your remote host by simply using:</p> <pre><code>ssh user@host\n</code></pre> <p>Hope this one helps someone out there!</p>","tags":["linux","windows","ssh"]},{"location":"documentation/","title":"Documentation space","text":"<p>Be sure to select a category at the left sidebar or search for some piece of command or docker documentation.</p> <p>Docker</p>"},{"location":"documentation/Commands/add-container-to-additional-network-on-unraid/","title":"add container to additional network on unRAID","text":"<p>The custom docker network needs to be created first with <code>docker network create &lt;networkname&gt;</code> and unRAID docker options set to \"Preserve user defined networks\" as enabled.</p> <p>Edit the container on advanced view. Under \"Post Arguments\" enter/add the following command:</p> <pre><code>&amp;&amp; docker network connect &lt;networkname&gt; &lt;containername&gt;\n</code></pre>","tags":["containers","unraid"]},{"location":"documentation/Commands/add-directory-to-path-environment-variable/","title":"add directory to PATH environment variable","text":"<pre><code>echo 'export PATH=\"$HOME/.local/bin:$PATH\"' &gt;&gt; .bashrc\n</code></pre>"},{"location":"documentation/Commands/caching-on-nginx/","title":"Caching on nginx","text":"<p>Caching config (https://www.nginx.com/resources/wiki/start/topics/examples/reverseproxycachingexample/)</p> <p>This part goes into nginx.conf:</p> <p>{% code overflow=\"wrap\" %} <pre><code>proxy_cache_path /config/nginx/cache levels=1:2 keys_zone=STATIC:10m inactive=24h max_size=1g;\n</code></pre></p> <p>This part goes in the location of the proxy-confs to cache:</p> <pre><code>proxy_buffering on;\nproxy_cache STATIC;\nproxy_cache_valid 200 1d;\nproxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;\n</code></pre>"},{"location":"documentation/Commands/create-sudo-user-in-ubuntu-lxc-container/","title":"create sudo user with access to docker in ubuntu lxc container","text":"<pre><code>useradd -s /bin/bash -m -G sudo,docker username\n</code></pre> <p>or alternatively</p> <pre><code>adduser username\nadduser username sudo\nadduser username docker\n</code></pre>"},{"location":"documentation/Commands/delete-local-lvm-proxmox/","title":"Delete the local-lvm directory from proxmox and resize the local to get the complete disk space","text":"<p>Note</p> <p>You'll need to move all disks, isos, etc. from the <code>local-lvm</code> storage to the <code>local</code> storage before performing these steps.</p> <ol> <li>Delete local-lvm from CLI:</li> </ol> <pre><code>lvremove /dev/pve/data\n</code></pre> <ol> <li>Reallocate the space</li> </ol> <pre><code>lvresize -l +100%FREE /dev/pve/root\nresize2fs /dev/mapper/pve-root\n</code></pre>"},{"location":"documentation/Commands/grow-boot-volume-oracle-instance/","title":"Grow the boot volume of an oracle VM Ubuntu instance","text":"<p>Backup current partition table</p> <pre><code>sfdisk -d /dev/sdb &gt; sdb_partition_bak.dmp\n</code></pre> <p>Execute a dry-run to see the changes that will apply. Install with <code>apt-get install cloud-utils</code> if you don't have it already.</p> <pre><code>growpart -N /dev/sdb 1\n</code></pre> <p>If all looks good:</p> <pre><code>growpart /dev/sdb 1\n</code></pre> <p>Resize file system now:</p> <pre><code>resize2fs /dev/sdb1\n</code></pre> <p>See the change now:</p> <pre><code>df -h\n</code></pre>"},{"location":"documentation/Commands/linux-mitigation-disable-security-considerations-debian/","title":"linux mitigation disable (debian)","text":"<p>Edit <code>/etc/default/grub</code></p> <p>Line should say <code>GRUB_CMDLINE_LINUX_DEFAULT=\"mitigations=off\"</code></p> <p>Then run command <code>update-grub</code></p>"},{"location":"documentation/Commands/no-sudo-password-prompt-for-current-user/","title":"no sudo password prompt for current user","text":"<p>This will make it possible for the current user (the user executing the command will be added to it via the environment variable $USER in the command) to execute all sudo commands without a prompt for password.</p> <pre><code>echo \"$USER ALL=(ALL:ALL) NOPASSWD: ALL\" | sudo tee /etc/sudoers.d/dont-prompt-$USER-for-sudo-password\n</code></pre>"},{"location":"documentation/Commands/pi-hole-one-line-install/","title":"pi-hole one line install","text":"<pre><code>curl -sSL https://install.pi-hole.net | bash\n</code></pre>"},{"location":"documentation/Commands/specifying-a-static-container-ip-on-the-same-subnet-of-an-unraid-host/","title":"specifying a static container IP on the same subnet of an UNRAID host","text":"<pre><code>// version: '3.3'\nservices:\n    testcontainer:\n        container_name: testcontainer\n        environment:\n            - TZ=America/Puerto_Rico\n            - HOST_OS=Unraid\n            - HOST_CONTAINERNAME=testcontainer\n            - PUID=99\n            - PGID=100\n            - UMASK=022\n        volumes:\n            - '/mnt/user/appdata/nginx:/config:rw'\n        image: lscr.io/linuxserver/nginx\n        networks:\n            dockernat:\n                ipv4_address: 192.168.0.250\n\nnetworks:\n    dockernat:\n        external: true\n        name: br0\n</code></pre>"},{"location":"documentation/Commands/stop-gdm3-in-ubuntu-desktop-install/","title":"stop gdm3 in ubuntu desktop install","text":"<pre><code>sudo service gdm3 stop\n</code></pre>"},{"location":"documentation/Commands/store-credentials-git/","title":"Store remote credentials for a local repository","text":"<p>Note</p> <p>This will store the credentials in plaintext for this repository. This is not secure.</p> <pre><code>git config credential.helper store\n</code></pre>","tags":["git","development"]},{"location":"documentation/Commands/ubuntu-kernel-upgrade/","title":"ubuntu kernel upgrade","text":""},{"location":"documentation/Commands/ubuntu-kernel-upgrade/#install","title":"Install","text":"<pre><code>apt install wget\nwget https://raw.githubusercontent.com/pimlie/ubuntu-mainline-kernel.sh/master/ubuntu-mainline-kernel.sh\nchmod +x ubuntu-mainline-kernel.sh\nsudo mv ubuntu-mainline-kernel.sh /usr/local/bin/\n</code></pre> <p>If you want to automatically check for a new kernel version when you login:</p> <pre><code>wget https://raw.githubusercontent.com/pimlie/ubuntu-mainline-kernel.sh/master/UbuntuMainlineKernel.desktop\nmv UbuntuMainlineKernel.desktop ~/.config/autostart/\n</code></pre>"},{"location":"documentation/Commands/yt-dlp-command-to-record-in-a-different-file-each-time%20copy/","title":"yt-dlp command to record in a different file each time","text":"<pre><code>yt-dlp -o \"%(epoch)s.%(ext)s\" --no-part --hls-use-mpegts\n</code></pre>"},{"location":"documentation/SAP-Scripts/new-table-entries/","title":"new entries into a table using vbs on Excel spreadsheet to SM30 on SAP","text":"<p>Working on SAP Security, I've come up to some instances in which a script would help a lot! </p> <p>This is one of those instances.</p> <p>Note</p> <p>Enter this in a module on the Excel workbook you're working with.</p> <p>Also, be sure to trace once with the SAPGUI script recorder to get the values for <code>&lt;saptable&gt;</code> and <code>&lt;saptablefield&gt;</code>.</p> <p>Timer code can be removed/commented before execution.</p> <pre><code>Sub sm30newentriesTABLE()\n\n'\n' new entries on TABLE\n'\n\n' timer code to count time taken on script\nDim StartTime As Double\nStartTime = Timer\n\n        ''''''''''''''''''''\n            'Your Code'\n        ''''''''''''''''''''\n' timer code to count time taken on script\n\n' variables\nDim i, role, roleDescription, pSecondary, pPrimary\n' variables\n\n' sapgui connection\nSet SapGuiAuto = GetObject(\"SAPGUI\")\nSet SapApplication = SapGuiAuto.GetScriptingEngine\nSet Connection = SapApplication.Children(0)\nSet session = Connection.Children(0)\n' sapgui connection\n\n'go into tcode\nsession.findById(\"wnd[0]/tbar[0]/okcd\").Text = \"/nSM30\"\nsession.findById(\"wnd[0]/tbar[0]/btn[0]\").press\nsession.findById(\"wnd[0]/usr/ctxtVIEWNAME\").Text = \"tablename\"\nsession.findById(\"wnd[0]/usr/btnUPDATE_PUSH\").press\nsession.findById(\"wnd[0]/tbar[1]/btn[5]\").press\n\n'get data from current active sheet in the opened workbook\nFor i = 2 To Cells.Find(\"*\", Range(\"A1\"), xlFormulas, , xlByRows, xlPrevious).Row\n'set variables values for each row\nroleS = Cells(i, 1).Value\nroleDescription = Cells(i, 2).Value\npSecondary = Cells(i, 10).Value\npPrimary = Cells(i, 11).Value\n\n'do new entries\nsession.findById(\"wnd[0]/&lt;saptable&gt;/&lt;saptablefield&gt;\").Text = roleS\nsession.findById(\"wnd[0]/&lt;saptable&gt;/&lt;saptablefield&gt;\").Text = roleDescription\nsession.findById(\"wnd[0]/&lt;saptable&gt;/&lt;saptablefield&gt;\").Key = \"Y\"\nsession.findById(\"wnd[0]/&lt;saptable&gt;/&lt;saptablefield&gt;\").Key = \"Y\"\nsession.findById(\"wnd[0]/&lt;saptable&gt;/&lt;saptablefield&gt;\").Key = \"PR1\"\nsession.findById(\"wnd[0]/&lt;saptable&gt;/&lt;saptablefield&gt;\").Text = pSecondary\nsession.findById(\"wnd[0]/&lt;saptable&gt;/&lt;saptablefield&gt;\").Text = pPrimary\nsession.findById(\"wnd[0]/&lt;saptable&gt;/&lt;saptablefield&gt;\").Key = \"PWM\"\n\n'move one vertical scroll step down\nsession.findById(\"wnd[0]/&lt;saptable&gt;\").verticalScrollbar.Position = i - 1\n\nNext\n\n' timer code to count time taken on script\nMsgBox \"RunTime : \" &amp; Format((Timer - StartTime) / 86400, \"hh:mm:ss\")\n' timer code to count time taken on script\n\nEnd Sub\n</code></pre>"},{"location":"documentation/docker/docker-backup/","title":"docker container backup with ntfy notifications","text":"<p>Used in selfhosted server and also a VPS</p> Can be used in a set <ul> <li>Docker Backup to backup your yaml files and container data</li> <li>Docker Restore to restore your yaml files and container data in the same or another host</li> <li>Docker Start to start all containers in your yaml files</li> </ul> <p>Script to be modified with your own setup:</p> <p>Example user: ubuntu</p> <pre><code>#!/bin/bash\n\n# Get today's date for our backup filenames\nbackupDate=$(date  +'%F')\n\n# this just prints the formated date variable to the console if you want to see it.\necho \"Backup date $backupDate\"\n\n# move to the path where you will keep all of yoru docker configurations and data\ncd /home/ubuntu/docker\n\ncd gateway\ndocker compose stop\ncd ../\ntar -czvf ./_backups/gateway-backup-$backupDate.tar.gz gateway\ncd gateway\ndocker compose start\n\ncd ../comingsoon\ndocker compose stop\ncd ../\ntar -czvf ./_backups/comingsoon-backup-$backupDate.tar.gz comingsoon\ncd comingsoon\ndocker compose start\n\n# # move to the path where you will keep all of your docker configurations and data\ncd ../\n\n# # now go back to home, and copy my backup file to my NAS\necho \"\"\necho \"Backup copy is running...\"\n\n# # copy the tar archive to your final backup location \nbackuplog=$(rsync -avz -e ssh /home/ubuntu/docker/_backups ubuntu@IP:/mnt/ubuntu/backups/)\n\n# # remove the tar file from the main home folder after it's copied\nmv ./_backups/* /mnt/backups/\n# rm ./_backups/*\n\ntopicurl=https://ntfy.example.com/topic\n\ncurl \\\n  -d \"Date: $backupDate \n--- backup transfer start ---\n$backuplog\n--- backup transfer end ---\n\nThe backup is now complete.\nPlease check for errors.\" \\\n  -H \"Title: docker backup - $(hostname)\" \\\n  $topicurl\n</code></pre>"},{"location":"documentation/docker/docker-restore/","title":"docker container restore with ntfy notifications","text":"<p>Used in selfhosted server and also a VPS</p> Can be used in a set <ul> <li>Docker Backup to backup your yaml files and container data</li> <li>Docker Restore to restore your yaml files and container data in the same or another host</li> <li>Docker Start to start all containers in your yaml files</li> </ul> <p>Script to be modified with your own setup:</p> <p>Example user: ubuntu</p> <pre><code>#!/bin/bash\n\n# Get today's date for our backup filename\nrestoreDate=$(date  +'%F')\n\n# this just prints the formated date variable to the console if you want to see it.\necho \"Restore date $restoreDate\"\n\n# move to the path where you will keep all of yoru docker configurations and data\ncd /home/ubuntu/docker\n\nfor file in /home/ubuntu/docker/_backups/*.tar.gz\ndo\n    tar -xvzf \"$file\" -C /home/ubuntu/docker/\ndone\n\nrestoreDate=$(date  +'%F')\ntopicurl=https://ntfy.example.com/topic\n\ncurl \\\n  -d \"Date: $restoreDate\nBackup location: /home/ubuntu/docker/_backups\nRestore location: /home/ubuntu/docker/\n\nThe restore is now complete.\nPlease check for errors.\" \\\n  -H \"Title: docker restore - $(hostname)\" \\\n  $topicurl\n</code></pre>"},{"location":"documentation/docker/docker-start/","title":"docker container startup with ntfy notifications","text":"<p>Used in selfhosted server and also a VPS</p> Can be used in a set <ul> <li>Docker Backup to backup your yaml files and container data</li> <li>Docker Restore to restore your yaml files and container data in the same or another host</li> <li>Docker Start to start all containers in your yaml files</li> </ul> <p>Script to be modified with your own setup:</p> <p>Example user: ubuntu</p> <pre><code>#!/bin/bash\n\n# Get today's date for our backup filename\nstartDate=$(date  +'%F')\n\n# this just prints the formated date variable to the console if you want to see it.\necho \"Restore date $restoreDate\"\n\n# move to the path where you will keep all of yoru docker configurations and data\ncd /home/ubuntu/docker\n\nfind . -maxdepth 2 -name \"docker-compose.yml\" -execdir docker compose up -d \\;\n\nstartDate=$(date  +'%F')\ntopicurl=https://ntfy.example.com/topic\n\ncurl -k \\\n  -d \"Date: $startDate\nDocker started on $(hostname)\n\nThe start is now complete.\nPlease check for errors.\" \\\n  -H \"Title: docker start - $(hostname)\" \\\n  $topicurl\n</code></pre>"},{"location":"documentation/markdown/reference/","title":"Notes","text":"","tags":["markdown","reference"]},{"location":"documentation/markdown/reference/#material-for-mkdocs-notes","title":"Material for MkDocs notes","text":"<p>To see code examples for reference, access the source reference material from Material for MkDocs</p>","tags":["markdown","reference"]},{"location":"documentation/markdown/reference/#mkdocs-notes","title":"MkDocs notes","text":"<p>For full documentation visit mkdocs.org.</p>","tags":["markdown","reference"]},{"location":"documentation/markdown/reference/#markdown-code-examples","title":"Markdown code examples","text":"","tags":["markdown","reference"]},{"location":"documentation/markdown/reference/#inline-code","title":"inline code","text":"<p>Some <code>code</code> goes here.</p>","tags":["markdown","reference"]},{"location":"documentation/markdown/reference/#code-blocks","title":"code blocks","text":"<pre><code>echo env &gt; .bash_env\n</code></pre>","tags":["markdown","reference"]},{"location":"documentation/markdown/reference/#code-highlight-with-line-highlights","title":"code highlight with line highlights","text":"<pre><code>services:\n  nginx:\n    container_name: nginx\n    image: linuxserver/nginx\n    ports:\n      - 80:80\n</code></pre>","tags":["markdown","reference"]},{"location":"documentation/markdown/reference/#admonitions","title":"admonitions","text":"<p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>supported types beside \"note\"  https://squidfunk.github.io/mkdocs-material/reference/admonitions/#supported-types</p>","tags":["markdown","reference"]},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/category/windows/","title":"Windows","text":""},{"location":"blog/category/selfhosting/","title":"Selfhosting","text":""},{"location":"blog/category/gaming/","title":"Gaming","text":""},{"location":"blog/category/linux/","title":"Linux","text":""},{"location":"blog/page/2/","title":"Blog","text":""},{"location":"blog/archive/2024/page/2/","title":"2024","text":""},{"location":"blog/category/linux/page/2/","title":"Linux","text":""}]}