{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-my-documentation-space","title":"Welcome to my documentation space","text":"<p>Here I'll have various snippets of code and documentation on my homelab journey and all things IT/DT</p> <p>I like getting my hands into docker containers and applications for specific scenarios.</p> <p>Take a look around and you could find something interesting!</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/12/13/fixing-the-gog-galaxy-20-ubisoft-connect-plugin-connection/","title":"Fixing the GOG Galaxy 2.0 Ubisoft Connect plugin connection","text":"","tags":["gaming","development","python"]},{"location":"blog/2024/12/13/fixing-the-gog-galaxy-20-ubisoft-connect-plugin-connection/#the-issue","title":"The issue","text":"<p>Upon connecting the GOG Galaxy client to Ubisoft Connect, it goes into a disconnected state again. This happens just seconds after signing in to the Ubisoft Connect account using the plugin's login. </p>","tags":["gaming","development","python"]},{"location":"blog/2024/12/13/fixing-the-gog-galaxy-20-ubisoft-connect-plugin-connection/#how-to-fix-the-issue","title":"How to fix the issue","text":"Note <p>This seems to be an open issue in the GitHub repo referenced below. A definitive solution has not been found as this method needs to be re-applied from time to time.</p> <p>We can use a solution shared on a Reddit post:</p> <p>Not able to connect my ubisoft connect with GoG galaxy byu/ved7108 ingog</p> <p>And this is also shared in this GitHub issue:</p> <p>https://github.com/FriendsOfGalaxy/galaxy-integration-uplay/issues/33#issuecomment-1444362239</p> <p>The basics are here for reference:</p> <ul> <li>Click on the \"Connect\" button in the Ubisoft Connect integration settings on GOG Galaxy</li> <li>Upon getting the screen, copy the (1) <code>appId</code> and (2) <code>genomeId</code> values from the pop-up URL</li> </ul> <p></p> <p>Image showing the necessary values to copy from the login URL</p> <ul> <li>Modify the file <code>%localappdata%\\GOG.com\\Galaxy\\plugins\\installed\\uplay_afb5a69c-b2ee-4d58-b916-f4cd75d4999a\\consts.py</code><ul> <li>If using VSCode, you can just execute in a powershell shell this command</li> </ul> </li> </ul> <pre><code>code %localappdata%\\GOG.com\\Galaxy\\plugins\\installed\\uplay_afb5a69c-b2ee-4d58-b916-f4cd75d4999a\\consts.py\n</code></pre> <ul> <li>Find the lines shown below and replace the values with the ones you got from the Ubisoft Connect login screen</li> </ul> <pre><code>CLUB_APPID = \"f35adcb5-1911-440c-b1c9-48fdc1701c68\"\nCLUB_GENOME_ID = \"5b36b900-65d8-47f3-93c8-86bdaa48ab50\"\n</code></pre> <ul> <li>Save the file and login into the Ubisoft Connect login screen</li> <li>It should now stay connected as shown below</li> </ul> <p>Remember</p> <p>Remember that this fix, so far, needs to be re-applied if Ubisoft changes the values on their side</p> <p></p> <p>Image showing a working connection to Ubisoft Connect after a successful file modification</p>","tags":["gaming","development","python"]},{"location":"blog/2025/01/06/auto-update-the-windows-hosts-file-with-a-hosted-list/","title":"Auto-update the Windows hosts file with a hosted list","text":"","tags":["windows"]},{"location":"blog/2025/01/06/auto-update-the-windows-hosts-file-with-a-hosted-list/#why-do-this","title":"Why do this","text":"<p>There are a multitude of reasons to do this or use an application like the one shared here. Maybe there is an application that phones home and you need to test how it behaves when it looses connection with an URL. Or there is a need to set this up to keep a system from accessing unsecure sites/services online.</p>","tags":["windows"]},{"location":"blog/2025/01/06/auto-update-the-windows-hosts-file-with-a-hosted-list/#where-to-get-hostctl-from","title":"Where to get hostctl from","text":"<p>hostctl's GitHub page: https://github.com/guumaster/hostctl</p>","tags":["windows"]},{"location":"blog/2025/01/06/auto-update-the-windows-hosts-file-with-a-hosted-list/#how-to-use-hostctl","title":"How to use hostctl","text":"<p>Here is a simple example to use this app to update the hosts file with a hosted list on a specific URL.</p> <p>Remember</p> <p>This application works in multiple OSs. I'm just showing how to use it on Windows as an example.</p> <p>Domains list Example URL: https://listwebsite.local/list.txt</p> <ol> <li>Put the executable in a directory covered by your PATH variable.</li> <li>Execute something like the following</li> </ol> <pre><code>hostctl add &lt;myprofilename&gt; -f https://listwebsite.local/list.txt\n</code></pre> <ol> <li>The executable will create a profile called <code>myprofilename</code> inside the hosts file. That is to keep additions separate from the default/manually entered ones already in the hosts file.</li> </ol> <p>This application can be used to perform backups and restores of the hosts file too. More about it can be found in the documentation at: https://guumaster.github.io/hostctl/</p>","tags":["windows"]},{"location":"blog/2025/03/16/igpu-gvt-g-split-passthrough/","title":"iGPU GVT-g Split Passthrough (Intel Integrated Graphics)","text":"<p>Original post: https://3os.org/infrastructure/proxmox/gpu-passthrough/igpu-split-passthrough/</p>","tags":["proxmox","igpu","passthrough"]},{"location":"blog/2025/03/16/igpu-gvt-g-split-passthrough/#introduction","title":"Introduction","text":"<p>Intel Integrated Graphics (iGPU) is a GPU that is integrated into the CPU. The GPU is a part of the CPU and is used to render graphics. Proxmox may be configured to use iGPU split passthrough to VM to allow the VM to use the iGPU for hardware acceleration for example using video encoding/decoding and Transcoding for series like [Plex][plex-url], [Emby][emby-url] and [Jellyfin][jellyfin-url].   This guide will show you how to configure Proxmox to use iGPU passthrough to VM.</p> <p>Your mileage may vary depending on your hardware. The following guide was tested with Intel Gen8 CPU.</p> <p>Supported CPUs</p> <p><code>iGPU GVT-g Split Passthrough</code> is supported only on Intel's 5<sup>th</sup> generation to 10<sup>th</sup> generation CPUs!</p> <p>Known supported CPU families:</p> <ul> <li> <p>Broadwell</p> </li> <li> <p>Skylake</p> </li> <li> <p>Kaby Lake</p> </li> <li> <p>Coffee Lake</p> </li> <li> <p>Comet Lake</p> </li> </ul> <p>There are two ways to use iGPU passthrough to VM. The first way is to use the <code>Full iGPU Passthrough</code> to VM. The second way is to use the <code>iGPU GVT-g</code> technology which allows as to split the iGPU into two parts. We will be covering the <code>Split iGPU Passthrough</code>. If you want to use the split <code>Full iGPU Passthrough</code> you can find the guide [here][igpu-full-passthrough-url].</p>","tags":["proxmox","igpu","passthrough"]},{"location":"blog/2025/03/16/igpu-gvt-g-split-passthrough/#proxmox-configuration-for-gvt-g-split-passthrough","title":"Proxmox Configuration for GVT-g Split Passthrough","text":"<p>The following examples uses <code>SSH</code> connection to the Proxmox server. The editor is <code>nano</code> but feel free to use any other editor. We will be editing the <code>grub</code> configuration file.</p> <p>Edit the <code>grub</code> configuration file.</p> <pre><code>nano /etc/default/grub\n</code></pre> <p>Find the line that starts with <code>GRUB_CMDLINE_LINUX_DEFAULT</code> by default they should look like this:</p> <pre><code>GRUB_CMDLINE_LINUX_DEFAULT=\"quiet\"\n</code></pre> <p>We want to allow <code>passthrough</code> and <code>Blacklists</code> known graphics drivers to prevent proxmox from utilizing the iGPU.</p> <p>Your <code>GRUB_CMDLINE_LINUX_DEFAULT</code> should look like this:</p> <pre><code>GRUB_CMDLINE_LINUX_DEFAULT=\"quiet intel_iommu=on i915.enable_gvt=1 iommu=pt pcie_acs_override=downstream,multifunction video=efifb:off video=vesa:off vfio_iommu_type1.allow_unsafe_interrupts=1 kvm.ignore_msrs=1 modprobe.blacklist=radeon,nouveau,nvidia,nvidiafb,nvidia-gpu\"\n</code></pre> <p>Note</p> <p>This will blacklist most of the graphics drivers from proxmox. If you have a specific driver you need to use for Proxmox Host you need to remove it from <code>modprobe.blacklist</code></p> <p>Save and exit the editor.</p> <p>Update the grub configuration to apply the changes the next time the system boots.</p> <pre><code>update-grub\n</code></pre> <p>Next we need to add <code>vfio</code> modules to allow PCI passthrough.</p> <p>Edit the <code>/etc/modules</code> file.</p> <pre><code>nano /etc/modules\n</code></pre> <p>Add the following line to the end of the file:</p> <pre><code># Modules required for PCI passthrough\nvfio\nvfio_iommu_type1\nvfio_pci\nvfio_virqfd\n\n# Modules required for Intel GVT-g Split\nkvmgt\n</code></pre> <p>Save and exit the editor.</p> <p>Update configuration changes made in your /etc filesystem</p> <pre><code>update-initramfs -u -k all\n</code></pre> <p>Reboot Proxmox to apply the changes</p> <p>Verify that IOMMU is enabled</p> <pre><code>dmesg | grep -e DMAR -e IOMMU\n</code></pre> <p>There should be a line that looks like <code>DMAR: IOMMU enabled</code>. If there is no output, something is wrong.</p> <pre><code>[0.000000] Warning: PCIe ACS overrides enabled; This may allow non-IOMMU protected peer-to-peer DMA\n[0.067203] DMAR: IOMMU enabled\n[2.573920] pci 0000:00:00.2: AMD-Vi: IOMMU performance counters supported\n[2.580393] pci 0000:00:00.2: AMD-Vi: Found IOMMU cap 0x40\n[2.581776] perf/amd_iommu: Detected AMD IOMMU #0 (2 banks, 4 counters/bank).\n</code></pre>","tags":["proxmox","igpu","passthrough"]},{"location":"blog/2025/03/16/igpu-gvt-g-split-passthrough/#windows-virtual-machine-igpu-passthrough-configuration","title":"Windows Virtual Machine iGPU Passthrough Configuration","text":"<p>For better results its recommend to use this [Windows 10/11 Virtual Machine configuration for proxmox][windows-vm-configuration-url].</p> <p>Find the PCI address of the iGPU.</p> <pre><code>lspci -nnv | grep VGA\n</code></pre> <p>This should result in output similar to this:</p> <pre><code>00:02.0 VGA compatible controller [0300]: Intel Corporation CometLake-S GT2 [UHD Graphics 630] [8086:3e92] (prog-if 00 [VGA controller])\n</code></pre> <p>If you have multiple VGA, look for the one that has the <code>Intel</code> in the name.</p> <p>Here, the PCI address of the iGPU is <code>00:02.0</code>.</p> <p>For best performance the VM should be configured the <code>Machine</code> type to q35. This will allow the VM to utilize PCI-Express passthrough.</p> <p>Open the web gui and navigate to the <code>Hardware</code> tab of the VM you want to add a vGPU. Click <code>Add</code> above the device list and then choose <code>PCI Device</code></p> <p>Open the <code>Device</code> dropdown and select the iGPU, which you can find using it\u2019s PCI address. This list uses a different format for the PCI addresses id, <code>00:02.0</code> is listed as <code>0000:00:02.0</code>.</p> <p>Click <code>Mdev Type</code>, You should be presented with a list of the available split passthrough devices choose the better performing one for the vm.</p> <p>Select <code>ROM-Bar</code>, <code>PCI-Express</code> and then click <code>Add</code>.</p> <p>The Windows Virtual Machine Proxmox Setting should look like this:</p> <p>Power on the Windows Virtual Machine.</p> <p>Open the VM's Console. Install the latest version of [Intel's Graphics Driver][intel-gpu-drivers-url]{target=_blank} or use the [Intel Driver &amp; Support Assistant][intel-driver-and-support-assistant-url]{target=_blank} installer.</p> <p>If all when well you should see the following output in <code>Device Manager</code> and [GPU-Z][gpu-z-url]{target=_blank}:</p> <p>That's it! You should now be able to use the iGPU for hardware acceleration inside the VM and still have proxmox's output on the screen.</p>","tags":["proxmox","igpu","passthrough"]},{"location":"blog/2025/03/16/igpu-gvt-g-split-passthrough/#linux-virtual-machine-igpu-passthrough-configuration","title":"Linux Virtual Machine iGPU Passthrough Configuration","text":"<p>We will be using Ubuntu Server 20.04 LTS for this guide.</p> <p>From Proxmox Terminal find the PCI address of the iGPU.</p> <pre><code>lspci -nnv | grep VGA\n</code></pre> <p>This should result in output similar to this:</p> <pre><code>00:02.0 VGA compatible controller [0300]: Intel Corporation CometLake-S GT2 [UHD Graphics 630] [8086:3e92] (prog-if 00 [VGA controller])\n</code></pre> <p>If you have multiple VGA, look for the one that has the <code>Intel</code> in the name.</p> <p>![Proxmox lspci vga][proxmox-lspci-vga-img]</p> <p>Here, the PCI address of the iGPU is <code>00:02.0</code>.</p> <p>VM should be configured the <code>Machine</code> type to i440fx. Open the web gui and navigate to the <code>Hardware</code> tab of the VM you want to add a vGPU to. Click <code>Add</code> above the device list and then choose <code>PCI Device</code></p> <p>![Ubuntu VM Add PCI Device][ubuntu-vm-add-pci-device-img]</p> <p>Open the <code>Device</code> dropdown and select the iGPU, which you can find using it\u2019s PCI address. This list uses a different format for the PCI addresses id, <code>00:02.0</code> is listed as <code>0000:00:02.0</code>.</p> <p>![Add iGPU MDev to VM][general-add-igpu-mdev-to-vm-img]</p> <p>Click <code>Mdev Type</code>, You should be presented with a list of the available split passthrough devices choose the better performing one for the vm.</p> <p>Select <code>ROM-Bar</code>, and then click <code>Add</code>.</p> <p>The Ubuntu Virtual Machine Proxmox Setting should look like this:</p> <p>Boot the VM. To test the iGPU passthrough was successful, you can use the following command:</p> <pre><code> sudo lspci -nnv | grep VGA\n</code></pre> <p>The output should incliude the Intel iGPU:</p> <pre><code>00:10.0 VGA compatible controller [0300]: Intel Corporation UHD Graphics 630 (Desktop) [8086:3e92] (prog-if 00 [VGA controller])\n</code></pre> <p>Now we need to check if the GPU's Driver initalization is working.</p> <pre><code>cd /dev/dri &amp;&amp; ls -la\n</code></pre> <p>The output should incliude the <code>renderD128</code></p> <p>That's it! You should now be able to use the iGPU for hardware acceleration inside the VM and still have proxmox's output on the screen.</p>","tags":["proxmox","igpu","passthrough"]},{"location":"blog/2025/03/16/igpu-gvt-g-split-passthrough/#debug","title":"Debug","text":"<p>Dbug Messages - Shows Hardware initialization and errors</p> <pre><code>dmesg -w\n</code></pre> <p>Display PCI devices information</p> <pre><code>lspci\n</code></pre> <p>Display Driver in use for PCI devices</p> <pre><code>lspci -k\n</code></pre> <p>Display IOMMU Groups the PCI devices are assigned to</p> <pre><code>#!/bin/bash\nshopt -s nullglob\nfor g in $(find /sys/kernel/iommu_groups/* -maxdepth 0 -type d | sort -V); do\n    echo \"IOMMU Group ${g##*/}:\"\n    for d in $g/devices/*; do\n        echo -e \"\\t$(lspci -nns ${d##*/})\"\n    done;\ndone;\n</code></pre>","tags":["proxmox","igpu","passthrough"]},{"location":"blog/2025/05/04/install-glances-and-keep-it-running-for-showing-gethomepagedev-system-stats/","title":"Install glances and keep it running for showing gethomepage.dev system stats","text":"<p>This will make the <code>glances</code> application run in the background on every reboot and provide the neccesary metrics for homepage.</p> <p>Install pip:</p> <pre><code>sudo apt install python3-pip\n</code></pre> <p>Install glances with pip for this user:</p> <pre><code>pip install --user 'glances[web]'\n</code></pre> <p>Re source your <code>.profile</code> for the new executable for <code>glances</code> to be in your current environment:</p> <pre><code>source ~/.profile\n</code></pre> <p>Update the crontab to run glances at startup without web UI but able to share system metrics (no web UI to make it more efficient):</p> <pre><code># this goes on crontab\n@reboot /home/ismael/.local/bin/glances -w --disable-webui\n</code></pre> <p>Reboot the server and glances should be running after this automatically on every reboot. Works great in an LXC container.</p> <p>Create the <code>services.yaml</code> entry for gethomepage.dev to show server root usage stats:</p> Note <p>There are a bunch of strings on this YAML that are customized to your liking. See https://gethomepage.dev/widgets/services/glances/ for the specifics on the Glances widget.</p> <pre><code>...\n- Docker:\n    - mini-docker:\n        icon: docker.png\n        widgets: \n            - type: glances\n              url: http://&lt;IP of server&gt;:61208\n              version: 4 # main version of glances used\n              metric: fs:/ # showing root usage\n...\n</code></pre> <p>At the end it should look something like this:</p> <p></p>","tags":["metrics","status","glances","cron"]},{"location":"blog/2025/08/25/installing-microsoft-edit-in-debian-or-ubuntu-based-distros/","title":"Installing Microsoft Edit in Debian or Ubuntu based distros","text":"Note <p>The current version of Edit (1,2,0) is not available via the package manager <code>apt</code> yet. This could change at some point in the future, making for an easier deployment.</p>","tags":["development","git","linux"]},{"location":"blog/2025/08/25/installing-microsoft-edit-in-debian-or-ubuntu-based-distros/#install-pre-requisites","title":"Install Pre-requisites","text":"<p>zstd - to decompress the downloaded file</p> <pre><code>sudo apt install zstd\n</code></pre>","tags":["development","git","linux"]},{"location":"blog/2025/08/25/installing-microsoft-edit-in-debian-or-ubuntu-based-distros/#install-the-latest-edit-version-from-github-for-x86_64","title":"Install the latest Edit version from GitHub for x86_64","text":"<pre><code>EDIT_VERSION=$(curl -s \"https://api.github.com/repos/microsoft/edit/releases/latest\" | grep -Po '\"tag_name\": \"v\\K[0-9.]+')\nwget -qO edit.tar.zst https://github.com/microsoft/edit/releases/latest/download/edit-$EDIT_VERSION-x86_64-linux-gnu.tar.zst\nsudo tar xf edit.tar.zst -C /usr/local/bin edit\nedit --version\nrm -rf edit.tar.zst\n</code></pre> <p>This can easily be made into a script for multiple installations.</p>","tags":["development","git","linux"]},{"location":"blog/2023/10/13/ssh-tunneling-for-easy-access-to-web-based-apps-form-servers/","title":"SSH Tunneling for easy access to web-based apps form servers","text":"<p>I had to access Portainer in my cloud VM to modify docker containers. I can access it now via any web browser with SSL (https) no problem, but this way is good in a pinch </p> <p>Run this command in your local machine:</p> <pre><code>ssh -L 9000:127.0.0.1:9000 my_user@my-remote-server\n</code></pre> <p>This will forward port 9000 to our local machine:</p> <p>http://localhost:9000 or http://127.0.0.1:9000</p> <p>At this local address the Portainer web UI from the remote server will appear.</p> <p>Nice and neat little SSH trick! </p>","tags":["linux"]},{"location":"blog/2024/10/13/fix-your-slow-origin-games-download-speeds--updated/","title":"Fix your SLOW Origin Games download speeds \u2013 UPDATED","text":"<p>Note</p> <p>UPDATE 2023.10.13 - This post is here just for history's sake as Origin is basically deprecated at this point in time. It's always nice to keep history though.  </p> <p>UPDATE 2021.08.20 \u2013 This is a non-issue for me anymore although now I personally use EA Desktop with the Xbox Game Pass for PC. I have Origin installed but have not used it directly anymore since.</p> <p>ORIGINAL POST BELOW:</p> <p>Origin can be a bit sluggish at times. But we have to live with it no matter what (for now maybe? who knows).</p> <p>Recently I was downloading the latest patch for Apex Legends. But when I saw my client downloading @ 2.5 MB/s on a 70 Mbps connection, I got intrigued to say the least. Mad could be a better description of the moment. I could get up to 8.75 MB/s on that connection theoretically. I use a 1 GBps wired connection for the computer to my router and also a 1 GBps wired connection from said router to the cable company modem. This is a best case scenario for Origin.</p> <p>I got into research overdrive that night. Looking over all the internet to find how to fix this. Some reddit posts and forum replies later\u2026 I came across this HUGE post on answers.ea.com which has been running for almost 3 years now. People very mad and trying all kind of methods to try to squeeze the most out of their connection. Looking to get better download speeds on Origin to get their games and updates.</p> <p>There was no good fix for this.</p> <p>So I searched deeper and found this little snippet of information from the site https://www.pcgamingwiki.com/. The post section, which you can read here, is in regards to resolving an issue where the Origin client suddenly stops downloading mid-download. But says it has been reported to improve the download speeds also.</p> <p>Mod hat ON!</p> <p>The excerpt from the site is here for your convenience. Very easy steps:</p> <ul> <li>Exit Origin</li> <li>Create a new empty document on your desktop</li> <li>Enter the following text in the file:</li> </ul> <pre><code>[connection]\nEnvironmentName=production\n\n[Feature]\nCdnOverride=akamai\n</code></pre> <ul> <li>Save the file as EACore.ini.</li> <li>Now start Origin.</li> </ul> <p>Upon start you will be asked if you want to import the file you just created on your desktop. Press Yes. This will overwrite your old config-file.</p>","tags":["origin","gaming"]},{"location":"blog/2024/10/13/fix-your-slow-origin-games-download-speeds--updated/#note","title":"Note","text":"<ul> <li>The EACore.ini file is deleted from your desktop as soon as you import it. If you ever want to leave R&amp;D mode you need to go to the location where Origin is installed and delete the EACore.ini file found there.</li> </ul> <p>It has been reported that having Origin in R&amp;D-mode will increase your download speed. This made a huge change for me. The Origin client started with a display of \u201cR&amp;D | PR\u201d in the upper right corner. Then trying the remainder of the patch download I was amazed to see 8.83 MB/s of download speed in Origin.</p> <p>As a note, I also use Google Public DNS in my gaming computer. That is DNS servers:</p> <p>8.8.8.8 and 8.8.4.4</p> <p>The patch just took a couple of minutes to download this time. Hope this helps someone out there.</p>","tags":["origin","gaming"]},{"location":"blog/2024/10/28/ntfy-notifications-from-unraid-using-curl/","title":"ntfy notifications from unRAID using curl","text":"<pre><code>#!/bin/bash\nOUTPUT=$(docker image prune -af | tail -1)\ntopicurl=https://ntfy.example.com/topic\n\ncurl --insecure \\\n  -d \"$OUTPUT\" \\\n  -H \"Title: Dangling images cleaned on $(hostname)\" \\\n  $topicurl\n</code></pre>","tags":["ntfy"]},{"location":"blog/2024/02/08/mount-an-smb-share-and-use-igpu-on-an-unprivileged-debian-12-lxc-container-in-proxmox/","title":"Mount an SMB share and use iGPU on an unprivileged Debian 12 LXC container in Proxmox","text":"","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/02/08/mount-an-smb-share-and-use-igpu-on-an-unprivileged-debian-12-lxc-container-in-proxmox/#pre-requisites","title":"Pre-requisites:","text":"<p>Create an unprivileged Debian 12 LXC container.</p> <p>Inside the LXC container, use the <code>root</code> user to create a non-root user with your name. In the case of mine I wanted to add it to the <code>sudo</code> and <code>docker</code> groups after installing Docker inside the LXC container.</p> <pre><code>useradd -s /bin/bash -m -G sudo,docker ismael\n</code></pre> <p>Change the user password to whatever you need.</p> <pre><code>su ismael\npasswd\n</code></pre> <p>This user's default <code>UID:GID</code> will be <code>1000:1000</code>. If not, create it with:</p> <pre><code>useradd ismael -u 1000 -g 1000 -m -s /bin/bash -G sudo,docker\n</code></pre> <p>Take note of this <code>UID:GID</code> as we'll use it to map the share in Proxmox. The share itself can be on another system. We'll mount it soon. I use an Unraid VM in this same host for this.</p>","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/02/08/mount-an-smb-share-and-use-igpu-on-an-unprivileged-debian-12-lxc-container-in-proxmox/#smb-share","title":"SMB share","text":"","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/02/08/mount-an-smb-share-and-use-igpu-on-an-unprivileged-debian-12-lxc-container-in-proxmox/#in-the-proxmox-host","title":"In the Proxmox host","text":"<p>We'll create a user that can be mapped from the host to the LXC container. If we don't do this step, we'll end up with just read access inside the LXC container.</p> <p>Proxmox maps the users and groups from the host to the LXC containers starting at <code>UID:GID</code>=<code>100000:100000</code>.</p> <p>The created <code>ismael</code> user then:</p> <ul> <li>Inside the LXC container UID: 1000</li> <li>Inside the host UID: 101000</li> </ul> <p>Create a group on the host with GID=101000 that will own the directory we'll create for the SMB share</p> <pre><code>groupadd -g 101000 ismael\n</code></pre> <p>Create the same user that we'll use inside the LXC container but with the right <code>UID:GID</code> combination</p> <pre><code>useradd ismael -u 101000 -g 101000 -m -s /bin/bash\n</code></pre> <p>Make a directory for the share</p> <pre><code>mkdir /mnt/media\n</code></pre> <p>Change said directory's owner to the previously created user</p> <pre><code>chown ismael:ismael /mnt/media\n</code></pre> <p>Modify the <code>/etc/fstab</code> file to mount the SMB share on the directory we created</p> <pre><code>nano /etc/fstab\n</code></pre> <p>Copy this line inside the nano editor for <code>/etc/fstab</code> (note the <code>guest</code> part as my SMB share does not have a password set)</p> <pre><code>//192.168.0.10/media /mnt/media cifs guest,rw,uid=1000,gid=1000,file_mode=0777,dir_mode=0777 0 0\n</code></pre> <p>If you use a password for your share</p> <pre><code>//192.168.0.10/media /mnt/media cifs username=&lt;username&gt;,password=&lt;password&gt;,rw,uid=1000,gid=1000,file_mode=0777,dir_mode=0777 0 0\n</code></pre> <p>Reload the changes to /etc/fstab before mounting</p> <pre><code>systemctl daemon-reload\nmount -a\n</code></pre> <p>Create a mountpoint in your LXC container pointing to the created share directory</p> <pre><code>pct set 104 -mp0 /mnt/media,mp=/mnt/user/media\n</code></pre> <p>Start your LXC container and the share will be mounted in <code>/mnt/user/media</code> and you should be able to write to it!</p>","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/02/08/mount-an-smb-share-and-use-igpu-on-an-unprivileged-debian-12-lxc-container-in-proxmox/#igpu","title":"iGPU","text":"<p>Coming soon...</p>","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/01/10/proxmox--automatically-restore-smbcifs-share-connections/","title":"Proxmox | automatically restore SMB/CIFS share connections","text":"<p>If at some point Proxmox loses connectivity with an SMB/CIFS share, it will not restore the connection by itself until a restart of the Proxmox node is performed.</p> <p>With this tip, you\u2019ll make the Proxmox node restore the connection automatically.</p> <p>In your node\u2019s shell, create a bash script that looks for mount points in <code>/mnt/pve/</code> and unmounts them if they become stale:</p> <pre><code>nano remount.sh\n</code></pre> <p>Put this content into the file:</p> <pre><code>#!/bin/bash\nlist=$(ls /mnt/pve)\n\nfor i in $list\ndo\n        status=$(ls /mnt/pve/$i 2&gt;&amp;1)\n\n        if [[ $status =~ .*Stale.* ]]\n                then\n                umount /mnt/pve/$i\n        fi\ndone\n</code></pre> <p>Remember to make the script executable by the user creating it:</p> <p>chmod 766 /root/remount.sh Add a cron job for this script to run automatically:</p> <pre><code>* * * * * /root/remount.sh &gt;/dev/null 2&gt;&amp;1\n</code></pre> <p>With that, any SMB/CIFS connections should be restored automatically. That is because the service <code>pvestatd</code> tries to remount every SMB share every 10 seconds.</p> <p>This approach could work for NFS shares too. I have not tested that possibility.</p>","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/02/08/mount-an-smb-share-and-use-igpu-on-an-unprivileged-debian-12-lxc-container-in-proxmox/","title":"Mount an SMB share and use iGPU on an unprivileged Debian 12 LXC container in Proxmox","text":"","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/02/08/mount-an-smb-share-and-use-igpu-on-an-unprivileged-debian-12-lxc-container-in-proxmox/#procedure","title":"Procedure","text":"<p>Prerequisites:</p> <p>Create an unprivileged Debian 12 LXC container.</p> <p>Inside the LXC container, use the <code>root</code> user to create a non-root user with your name. In the case of mine I wanted to add it to the <code>sudo</code> and <code>docker</code> groups after installing Docker inside the LXC container.</p> <pre><code>useradd -s /bin/bash -m -G sudo,docker ismael\n</code></pre> <p>Change the user password to whatever you need.</p> <pre><code>su ismael\npasswd\n</code></pre> <p>This user's default <code>UID:GID</code> will be <code>1000:1000</code>. If not, create it with:</p> <pre><code>useradd ismael -u 1000 -g 1000 -m -s /bin/bash -G sudo,docker\n</code></pre> <p>Take note of this <code>UID:GID</code> as we'll use it to map the share in Proxmox. The share itself can be on another system. We'll mount it soon. I use an Unraid VM in this same host for this.</p>","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/02/08/mount-an-smb-share-and-use-igpu-on-an-unprivileged-debian-12-lxc-container-in-proxmox/#smb-share","title":"SMB share","text":"","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/02/08/mount-an-smb-share-and-use-igpu-on-an-unprivileged-debian-12-lxc-container-in-proxmox/#in-the-proxmox-host","title":"In the Proxmox host","text":"<p>We'll create a user that can be mapped from the host to the LXC container. If we don't do this step, we'll end up with just read access inside the LXC container.</p> <p>Proxmox maps the users and groups from the host to the LXC containers starting at <code>UID:GID</code>=<code>100000:100000</code>.</p> <p>The created <code>ismael</code> user then:</p> <ul> <li>Inside the LXC container UID: 1000</li> <li>Inside the host UID: 101000</li> </ul> <p>Create a group on the host with GID=101000 that will own the directory we'll create for the SMB share</p> <pre><code>groupadd -g 101000 ismael\n</code></pre> <p>Create the same user that we'll use inside the LXC container but with the right <code>UID:GID</code> combination</p> <pre><code>useradd ismael -u 101000 -g 101000 -m -s /bin/bash\n</code></pre> <p>Make a directory for the share</p> <pre><code>mkdir /mnt/media\n</code></pre> <p>Change said directory's owner to the previously created user</p> <pre><code>chown ismael:ismael /mnt/media\n</code></pre> <p>Modify the <code>/etc/fstab</code> file to mount the SMB share on the directory we created</p> <pre><code>nano /etc/fstab\n</code></pre> <p>Copy this line inside the nano editor for <code>/etc/fstab</code> (note the <code>guest</code> part as my SMB share does not have a password set)</p> <pre><code>//192.168.0.10/media /mnt/media cifs guest,rw,uid=1000,gid=1000,file_mode=0777,dir_mode=0777 0 0\n</code></pre> <p>If you use a password for your share</p> <pre><code>//192.168.0.10/media /mnt/media cifs username=&lt;username&gt;,password=&lt;password&gt;,rw,uid=1000,gid=1000,file_mode=0777,dir_mode=0777 0 0\n</code></pre> <p>Reload the changes to /etc/fstab before mounting</p> <pre><code>systemctl daemon-reload\nmount -a\n</code></pre> <p>Create a mountpoint in your LXC container pointing to the created share directory</p> <pre><code>pct set 104 -mp0 /mnt/media,mp=/mnt/user/media\n</code></pre> <p>Start your LXC container and the share will be mounted in <code>/mnt/user/media</code> and you should be able to write to it!</p>","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/02/08/mount-an-smb-share-and-use-igpu-on-an-unprivileged-debian-12-lxc-container-in-proxmox/#igpu","title":"iGPU","text":"<p>Coming soon...</p>","tags":["linux","proxmox","smb","nas"]},{"location":"blog/2024/11/29/run-a-powershell-ps1-script-hidden-from-view-and-scheduled-on-task-scheduler-for-windows/","title":"run a powershell ps1 script hidden from view and scheduled on Task Scheduler for Windows","text":"","tags":["windows","powershell"]},{"location":"blog/2024/11/29/run-a-powershell-ps1-script-hidden-from-view-and-scheduled-on-task-scheduler-for-windows/#the-script-launcher","title":"The script launcher","text":"<p>We need a script launcher as PowerShell scripts run in the foreground and we don't want the window of this script to appear at all.</p> <p>This one can be a <code>.vbs</code> file that will be setup like this - In Task Scheduler     - Action: Start a program     - Program/script: <code>wscript</code>     - Add arguments (optional): <code>&lt;path\\to\\the\\.ps1\\file&gt;</code></p> <p>Here is the <code>.vbs</code> script:</p> <pre><code>command = \"powershell.exe \u00a0-ExecutionPolicy Bypass \u00a0C:\\Users\\Ismael\\Documents\\GitHub\\djismgaming.github.io\\blogupdate.ps1\"\n\nset shell = CreateObject(\"WScript.Shell\")\n\nshell.Run command,0\n</code></pre>","tags":["windows","powershell"]},{"location":"blog/2023/10/13/speedtouch-modem-as-a-router/","title":"speedtouch modem as a router","text":"<p>A speedtouch modem, like a 2007 model Thompson Speedtouch 585V6, is a DSL modem. But with a little tweak, it can be used as a router for your network.</p> <p>Run these commands towards the SpeedTouch modem using <code>telnet</code>:</p> <pre><code>telnet &lt;modem ip address&gt;\n</code></pre> <p>Commands to set up a SpeedTouch DSL modem as a router:</p> <p>For firmware versions 5.3 and lower:</p> <pre><code>ppp relay flush\nppp flush\neth flush\natm flush\natm phonebook flush\neth bridge ifdelete intf=ethport4\neth ifadd intf=ethport4\neth ifconfig intf=ethport4 dest=ethif4 retry=10 group=default\neth ifattach intf=ethport4\nip ifadd intf=WAN_Port dest=ethport4\nip ifconfig intf=WAN_Port hwaddr=00:11:42:0c:65:1d # This line is needed if MAC address cloning is required, otherwise it's not necessary\ndhcp client ifadd intf=WAN_Port\ndhcp client ifattach intf=WAN_Port\nnat ifconfig intf=WAN_Port translation=enabled\nnat ifattach intf=WAN_Port\nsaveall\n</code></pre> <p>For firmware versions 6.1 and higher:</p> <pre><code>ppp relay flush\nppp flush\neth flush\natm flush\natm phonebook flush\neth bridge ifdelete intf=ethport4\neth ifadd intf=eth_wan\neth ifconfig intf=eth_wan dest=ethif4\neth ifattach intf=eth_wan\nip ifadd intf=ip_wan_eth dest=eth_wan\nip ifconfig intf=ip_wan_eth status=up\nip ifconfig intf=ip_wan_eth hwaddr=00:11:42:0c:65:1d # This line is needed if MAC address cloning is required, otherwise it's not necessary\nip ifattach intf=ip_wan_eth\nnat ifconfig intf=ip_wan_eth translation=enabled\ndhcp client ifadd intf=ip_wan_eth\ndhcp client ifconfig intf=ip_wan_eth metric=5 dnsmetric=5\ndhcp client rqoptions and intf=ip_wan_eth option=dhcp-lease-time\ndhcp client rqoptions and intf=ip_wan_eth option=dhcp-renewal-time\ndhcp client rqoptions and intf=ip_wan_eth option=dhcp-rebinding-time\ndhcp client rqoptions and intf=ip_wan_eth option=subnet-mask\ndhcp client rqoptions and intf=ip_wan_eth option=classless-static-routes\ndhcp client rqoptions and intf=ip_wan_eth option=default-routers\ndhcp client rqoptions and intf=ip_wan_eth option=classfull-static-routes\ndhcp client rqoptions and intf=ip_wan_eth option=domain-name-servers\ndhcp client ifattach intf=ip_wan_eth\nsaveall\n</code></pre>","tags":["linux","networking","hardware","hardware","hacking","routers"]},{"location":"blog/2023/10/18/set-up-your-ssh-key-based-authentication-from-windows-in-a-single-line/","title":"Set up your SSH key-based authentication from Windows in a single line","text":"<p>Using Linux directly to interact with Linux servers is pretty great and seamless. But when your daily driver is Windows, this can be a little more cumbersome.</p> <p>For instance, when connecting with the Windows version of OpenSSH there is a way to copy your generated key for simple password-less logins after that.</p>","tags":["linux","windows","ssh"]},{"location":"blog/2023/10/18/set-up-your-ssh-key-based-authentication-from-windows-in-a-single-line/#generate-your-private-and-public-keys-in-your-windows-powershell-shell","title":"Generate your private and public keys in your Windows PowerShell shell","text":"<p>Execute the command below in Windows Terminal or any other terminal in Windows:</p> <pre><code>ssh-keygen\n</code></pre> <p>This one will generate the necessary keys in your local host. These will be located in your Windows profile directory under the <code>.ssh/</code> sub-directory.</p> <p>You can access it in this location on Windows by using the key combination <code>Win + R</code> and then entering this text in the Run window:</p> <pre><code>%userprofile%/.ssh/\n</code></pre> <p>That directory will include: - your generated private key <code>id_rsa</code> - your generated public key <code>id_rsa.pub</code></p> <p>The public key is the one we'll copy into any remote host we want to connect without using a password.</p>","tags":["linux","windows","ssh"]},{"location":"blog/2023/10/18/set-up-your-ssh-key-based-authentication-from-windows-in-a-single-line/#now-comes-the-single-line-i-talked-about-in-the-title","title":"Now comes the single line I talked about in the title!","text":"<p>Using the command below will make the same process like ssh-copy-id would but working with the OpenSSH in Windows. This will copy your SSH keys into the remote host.</p> <p>I use the Windows Terminal for this process. Just edit the line with your data. Specifically change the part <code>user@host.address</code> with your correct remote user and host IP/hostname.</p> <pre><code>type .ssh\\id_rsa.pub | ssh user@host.address \"mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys\"\n</code></pre> <p>This makes it possible to login directly to your remote host by simply using:</p> <pre><code>ssh user@host\n</code></pre> <p>Hope this one helps someone out there!</p>","tags":["linux","windows","ssh"]},{"location":"documentation/","title":"Documentation space","text":"<p>Be sure to select a category at the left sidebar or search for some piece of command or docker documentation.</p>"},{"location":"documentation/Commands/Create%20a%20logon%20task%20in%20task%20scheduler%20to%20a%20specific%20directory/","title":"Create a logon task in task scheduler to a specific directory","text":"<pre><code>sudo schtasks /create /sc onlogon /tn \"user\\Steam\" /rl highest /tr '\"C:\\Program Files (x86)\\Steam\\steam.exe\" -silent'\n</code></pre>"},{"location":"documentation/Commands/add-container-to-additional-network-on-unraid/","title":"add container to additional network on unRAID","text":"<p>The custom docker network needs to be created first with <code>docker network create &lt;networkname&gt;</code> and unRAID docker options set to \"Preserve user defined networks\" as enabled.</p> <p>Edit the container on advanced view. Under \"Post Arguments\" enter/add the following command:</p> <pre><code>&amp;&amp; docker network connect &lt;networkname&gt; &lt;containername&gt;\n</code></pre>","tags":["containers","unraid"]},{"location":"documentation/Commands/add-directory-to-path-environment-variable/","title":"add directory to PATH environment variable","text":"<pre><code>echo 'export PATH=\"$HOME/.local/bin:$PATH\"' &gt;&gt; .bashrc\n</code></pre>"},{"location":"documentation/Commands/add-storage-to-turnkey-vm-nextcloud/","title":"Add storage to a Turnkey VM like Nextcloud","text":"<p>Managing LVM on Proxmox</p> <ul> <li>Add additional disk to Turnkey VM in Proxmox</li> <li>find <code>/dev/sd*</code> for the new disk inside the VM</li> </ul> <pre><code>pvcreate /dev/sd*\n</code></pre> <pre><code>vgextend turnkey /dev/sd*\n</code></pre> <pre><code>vgdisplay\n</code></pre> <pre><code>lvextend -l+100%free /dev/turnkey/root\n</code></pre> <pre><code>resize2fs /dev/turnkey/root\n</code></pre>","tags":["vm","turnkey","lvm","proxmox"]},{"location":"documentation/Commands/caching-on-nginx/","title":"Caching on nginx","text":"<p>Caching config (https://www.nginx.com/resources/wiki/start/topics/examples/reverseproxycachingexample/)</p> <p>This part goes into nginx.conf:</p> <p>{% code overflow=\"wrap\" %} <pre><code>proxy_cache_path /config/nginx/cache levels=1:2 keys_zone=STATIC:10m inactive=24h max_size=1g;\n</code></pre></p> <p>This part goes in the location of the proxy-confs to cache:</p> <pre><code>proxy_buffering on;\nproxy_cache STATIC;\nproxy_cache_valid 200 1d;\nproxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;\n</code></pre>"},{"location":"documentation/Commands/clear-nextcloud%20turnkey-vm-logs/","title":"Clear Nextcloud Turnkey VM logs","text":"<pre><code>echo \"\" &gt; /var/www/nextcloud-data/nextcloud.log\n</code></pre>","tags":["vm","turnkey","logs","nextcloud"]},{"location":"documentation/Commands/create-sudo-user-in-ubuntu-lxc-container/","title":"create sudo user with access to docker in ubuntu lxc container","text":"<pre><code>useradd -s /bin/bash -m -G sudo,docker username\n</code></pre> <p>or alternatively</p> <pre><code>adduser username\nadduser username sudo\nadduser username docker\n</code></pre>"},{"location":"documentation/Commands/delete-local-lvm-proxmox/","title":"Delete the local-lvm directory from proxmox and resize the local to get the complete disk space","text":"<p>Note</p> <p>You'll need to move all disks, isos, etc. from the <code>local-lvm</code> storage to the <code>local</code> storage before performing these steps.</p> <ol> <li>Delete local-lvm from CLI:</li> </ol> <pre><code>lvremove /dev/pve/data\n</code></pre> <ol> <li>Reallocate the space</li> </ol> <pre><code>lvresize -l +100%FREE /dev/pve/root\nresize2fs /dev/mapper/pve-root\n</code></pre>"},{"location":"documentation/Commands/extend%20volume%20in%20TurnKey%20Linux%20Nextcloud%20appliance%20VM/","title":"Extend the root volume in TurnKey Linux Nextcloud appliance VM","text":"<p>After adding an additional drive to the VM in Proxmox:</p> <p>Note</p> <p>Change <code>/dev/sdb</code> on this post with the path to the disk you just added to the VM</p> <pre><code>pvcreate /dev/sdb\n</code></pre> <p>Extending the turnkey volume group by adding the physical volume <code>/dev/sdb</code></p> <pre><code>vgextend turnkey /dev/sdb\n</code></pre> <p>Extending the root logical volume on the turnkey volume group</p> <pre><code>lvextend -l +100%FREE /dev/turnkey/root\n</code></pre> <p>Resizing the root filesystem</p> <pre><code>resize2fs /dev/turnkey/root\n</code></pre> <p>Note</p> <p>All these changes are done while the system is running. No need to reboot.</p>","tags":["containers","proxmox","nextcloud"]},{"location":"documentation/Commands/grow-boot-volume-oracle-instance/","title":"Grow the boot volume of an oracle VM Ubuntu instance","text":"<p>Backup current partition table</p> <pre><code>sfdisk -d /dev/sdb &gt; sdb_partition_bak.dmp\n</code></pre> <p>Execute a dry-run to see the changes that will apply. Install with <code>apt-get install cloud-utils</code> if you don't have it already.</p> <pre><code>growpart -N /dev/sdb 1\n</code></pre> <p>If all looks good:</p> <pre><code>growpart /dev/sdb 1\n</code></pre> <p>Resize file system now:</p> <pre><code>resize2fs /dev/sdb1\n</code></pre> <p>See the change now:</p> <pre><code>df -h\n</code></pre>"},{"location":"documentation/Commands/linux-mitigation-disable-security-considerations-debian/","title":"linux mitigation disable (debian)","text":"<p>Edit <code>/etc/default/grub</code></p> <p>Line should say <code>GRUB_CMDLINE_LINUX_DEFAULT=\"mitigations=off\"</code></p> <p>Then run command <code>update-grub</code></p>"},{"location":"documentation/Commands/no-sudo-password-prompt-for-current-user/","title":"no sudo password prompt for current user","text":"<p>This will make it possible for the current user (the user executing the command will be added to it via the environment variable $USER in the command) to execute all sudo commands without a prompt for password.</p> <pre><code>echo \"$USER ALL=(ALL:ALL) NOPASSWD: ALL\" | sudo tee /etc/sudoers.d/dont-prompt-$USER-for-sudo-password\n</code></pre>"},{"location":"documentation/Commands/pi-hole-one-line-install/","title":"pi-hole one line install","text":"<pre><code>curl -sSL https://install.pi-hole.net | bash\n</code></pre>"},{"location":"documentation/Commands/specifying-a-static-container-ip-on-the-same-subnet-of-an-unraid-host/","title":"specifying a static container IP on the same subnet of an UNRAID host","text":"<pre><code>// version: '3.3'\nservices:\n    testcontainer:\n        container_name: testcontainer\n        environment:\n            - TZ=America/Puerto_Rico\n            - HOST_OS=Unraid\n            - HOST_CONTAINERNAME=testcontainer\n            - PUID=99\n            - PGID=100\n            - UMASK=022\n        volumes:\n            - '/mnt/user/appdata/nginx:/config:rw'\n        image: lscr.io/linuxserver/nginx\n        networks:\n            dockernat:\n                ipv4_address: 192.168.0.250\n\nnetworks:\n    dockernat:\n        external: true\n        name: br0\n</code></pre>"},{"location":"documentation/Commands/stop-gdm3-in-ubuntu-desktop-install/","title":"stop gdm3 in ubuntu desktop install","text":"<pre><code>sudo service gdm3 stop\n</code></pre>"},{"location":"documentation/Commands/store-credentials-git/","title":"Store remote credentials for a local repository","text":"<p>Note</p> <p>This will store the credentials in plaintext for this repository. This is not secure.</p> <pre><code>git config credential.helper store\n</code></pre>","tags":["git","development"]},{"location":"documentation/Commands/ubuntu-kernel-upgrade/","title":"ubuntu kernel upgrade","text":""},{"location":"documentation/Commands/ubuntu-kernel-upgrade/#install","title":"Install","text":"<pre><code>apt install wget\nwget https://raw.githubusercontent.com/pimlie/ubuntu-mainline-kernel.sh/master/ubuntu-mainline-kernel.sh\nchmod +x ubuntu-mainline-kernel.sh\nsudo mv ubuntu-mainline-kernel.sh /usr/local/bin/\n</code></pre> <p>If you want to automatically check for a new kernel version when you login:</p> <pre><code>wget https://raw.githubusercontent.com/pimlie/ubuntu-mainline-kernel.sh/master/UbuntuMainlineKernel.desktop\nmv UbuntuMainlineKernel.desktop ~/.config/autostart/\n</code></pre>"},{"location":"documentation/Commands/yt-dlp%20command%20to%20transcode%20video%20to%20h264%20after%20download/","title":"yt-dlp command to transcode video to h264 after download","text":"<pre><code>yt-dlp --recode-video mp4 --force-write-archive https://www.youtube.com/watch?v=dQw4w9WgXcQ\n</code></pre> <p>Here's a breakdown:</p> <ul> <li><code>--recode-video mp4</code>: This option tells <code>yt-dlp</code> to transcode the video into an MP4 container.</li> <li><code>&lt;video_url&gt;</code>: Replace this with the URL of the video.</li> <li><code>--force-write-archive</code>: This option forces <code>yt-dlp</code> to re-encode the video.</li> </ul>"},{"location":"documentation/Commands/yt-dlp-command-to-record-in-a-different-file-each-time%20copy/","title":"yt-dlp command to record in a different file each time","text":"<pre><code>yt-dlp -o \"%(epoch)s.%(ext)s\" --no-part --hls-use-mpegts\n</code></pre>"},{"location":"documentation/SAP-Scripts/new-table-entries/","title":"new entries into a table using vbs on Excel spreadsheet to SM30 on SAP","text":"<p>Working on SAP Security, I've come up to some instances in which a script would help a lot! </p> <p>This is one of those instances.</p> <p>Note</p> <p>Enter this in a module on the Excel workbook you're working with.</p> <p>Also, be sure to trace once with the SAPGUI script recorder to get the values for <code>&lt;saptable&gt;</code> and <code>&lt;saptablefield&gt;</code>.</p> <p>Timer code can be removed/commented before execution.</p> <pre><code>Sub sm30newentriesTABLE()\n\n'\n' new entries on TABLE\n'\n\n' timer code to count time taken on script\nDim StartTime As Double\nStartTime = Timer\n\n        ''''''''''''''''''''\n            'Your Code'\n        ''''''''''''''''''''\n' timer code to count time taken on script\n\n' variables\nDim i, role, roleDescription, pSecondary, pPrimary\n' variables\n\n' sapgui connection\nSet SapGuiAuto = GetObject(\"SAPGUI\")\nSet SapApplication = SapGuiAuto.GetScriptingEngine\nSet Connection = SapApplication.Children(0)\nSet session = Connection.Children(0)\n' sapgui connection\n\n'go into tcode\nsession.findById(\"wnd[0]/tbar[0]/okcd\").Text = \"/nSM30\"\nsession.findById(\"wnd[0]/tbar[0]/btn[0]\").press\nsession.findById(\"wnd[0]/usr/ctxtVIEWNAME\").Text = \"tablename\"\nsession.findById(\"wnd[0]/usr/btnUPDATE_PUSH\").press\nsession.findById(\"wnd[0]/tbar[1]/btn[5]\").press\n\n'get data from current active sheet in the opened workbook\nFor i = 2 To Cells.Find(\"*\", Range(\"A1\"), xlFormulas, , xlByRows, xlPrevious).Row\n'set variables values for each row\nroleS = Cells(i, 1).Value\nroleDescription = Cells(i, 2).Value\npSecondary = Cells(i, 10).Value\npPrimary = Cells(i, 11).Value\n\n'do new entries\nsession.findById(\"wnd[0]/&lt;saptable&gt;/&lt;saptablefield&gt;\").Text = roleS\nsession.findById(\"wnd[0]/&lt;saptable&gt;/&lt;saptablefield&gt;\").Text = roleDescription\nsession.findById(\"wnd[0]/&lt;saptable&gt;/&lt;saptablefield&gt;\").Key = \"Y\"\nsession.findById(\"wnd[0]/&lt;saptable&gt;/&lt;saptablefield&gt;\").Key = \"Y\"\nsession.findById(\"wnd[0]/&lt;saptable&gt;/&lt;saptablefield&gt;\").Key = \"PR1\"\nsession.findById(\"wnd[0]/&lt;saptable&gt;/&lt;saptablefield&gt;\").Text = pSecondary\nsession.findById(\"wnd[0]/&lt;saptable&gt;/&lt;saptablefield&gt;\").Text = pPrimary\nsession.findById(\"wnd[0]/&lt;saptable&gt;/&lt;saptablefield&gt;\").Key = \"PWM\"\n\n'move one vertical scroll step down\nsession.findById(\"wnd[0]/&lt;saptable&gt;\").verticalScrollbar.Position = i - 1\n\nNext\n\n' timer code to count time taken on script\nMsgBox \"RunTime : \" &amp; Format((Timer - StartTime) / 86400, \"hh:mm:ss\")\n' timer code to count time taken on script\n\nEnd Sub\n</code></pre>"},{"location":"documentation/docker/docker-backup/","title":"docker container backup with ntfy notifications","text":"<p>Used in selfhosted server and also a VPS</p> Can be used in a set <ul> <li>Docker Backup to backup your yaml files and container data</li> <li>Docker Restore to restore your yaml files and container data in the same or another host</li> <li>Docker Start to start all containers in your yaml files</li> </ul> <p>Script to be modified with your own setup:</p> <p>Example user: ubuntu</p> <pre><code>#!/bin/bash\n\n# Get today's date for our backup filenames\nbackupDate=$(date  +'%F')\n\n# this just prints the formated date variable to the console if you want to see it.\necho \"Backup date $backupDate\"\n\n# move to the path where you will keep all of yoru docker configurations and data\ncd /home/ubuntu/docker\n\ncd gateway\ndocker compose stop\ncd ../\ntar -czvf ./_backups/gateway-backup-$backupDate.tar.gz gateway\ncd gateway\ndocker compose start\n\ncd ../comingsoon\ndocker compose stop\ncd ../\ntar -czvf ./_backups/comingsoon-backup-$backupDate.tar.gz comingsoon\ncd comingsoon\ndocker compose start\n\n# # move to the path where you will keep all of your docker configurations and data\ncd ../\n\n# # now go back to home, and copy my backup file to my NAS\necho \"\"\necho \"Backup copy is running...\"\n\n# # copy the tar archive to your final backup location \nbackuplog=$(rsync -avz -e ssh /home/ubuntu/docker/_backups ubuntu@IP:/mnt/ubuntu/backups/)\n\n# # remove the tar file from the main home folder after it's copied\nmv ./_backups/* /mnt/backups/\n# rm ./_backups/*\n\ntopicurl=https://ntfy.example.com/topic\n\ncurl \\\n  -d \"Date: $backupDate \n--- backup transfer start ---\n$backuplog\n--- backup transfer end ---\n\nThe backup is now complete.\nPlease check for errors.\" \\\n  -H \"Title: docker backup - $(hostname)\" \\\n  $topicurl\n</code></pre>"},{"location":"documentation/docker/docker-restore/","title":"docker container restore with ntfy notifications","text":"<p>Used in selfhosted server and also a VPS</p> Can be used in a set <ul> <li>Docker Backup to backup your yaml files and container data</li> <li>Docker Restore to restore your yaml files and container data in the same or another host</li> <li>Docker Start to start all containers in your yaml files</li> </ul> <p>Script to be modified with your own setup:</p> <p>Example user: ubuntu</p> <pre><code>#!/bin/bash\n\n# Get today's date for our backup filename\nrestoreDate=$(date  +'%F')\n\n# this just prints the formated date variable to the console if you want to see it.\necho \"Restore date $restoreDate\"\n\n# move to the path where you will keep all of yoru docker configurations and data\ncd /home/ubuntu/docker\n\nfor file in /home/ubuntu/docker/_backups/*.tar.gz\ndo\n    tar -xvzf \"$file\" -C /home/ubuntu/docker/\ndone\n\nrestoreDate=$(date  +'%F')\ntopicurl=https://ntfy.example.com/topic\n\ncurl \\\n  -d \"Date: $restoreDate\nBackup location: /home/ubuntu/docker/_backups\nRestore location: /home/ubuntu/docker/\n\nThe restore is now complete.\nPlease check for errors.\" \\\n  -H \"Title: docker restore - $(hostname)\" \\\n  $topicurl\n</code></pre>"},{"location":"documentation/docker/docker-start/","title":"docker container startup with ntfy notifications","text":"<p>Used in selfhosted server and also a VPS</p> Can be used in a set <ul> <li>Docker Backup to backup your yaml files and container data</li> <li>Docker Restore to restore your yaml files and container data in the same or another host</li> <li>Docker Start to start all containers in your yaml files</li> </ul> <p>Script to be modified with your own setup:</p> <p>Example user: ubuntu</p> <pre><code>#!/bin/bash\n\n# Get today's date for our backup filename\nstartDate=$(date  +'%F')\n\n# this just prints the formated date variable to the console if you want to see it.\necho \"Restore date $restoreDate\"\n\n# move to the path where you will keep all of yoru docker configurations and data\ncd /home/ubuntu/docker\n\nfind . -maxdepth 2 -name \"docker-compose.yml\" -execdir docker compose up -d \\;\n\nstartDate=$(date  +'%F')\ntopicurl=https://ntfy.example.com/topic\n\ncurl -k \\\n  -d \"Date: $startDate\nDocker started on $(hostname)\n\nThe start is now complete.\nPlease check for errors.\" \\\n  -H \"Title: docker start - $(hostname)\" \\\n  $topicurl\n</code></pre>"},{"location":"documentation/markdown/reference/","title":"Notes","text":"","tags":["markdown","reference"]},{"location":"documentation/markdown/reference/#material-for-mkdocs-notes","title":"Material for MkDocs notes","text":"<p>To see code examples for reference, access the source reference material from Material for MkDocs</p>","tags":["markdown","reference"]},{"location":"documentation/markdown/reference/#markdown-code-examples","title":"Markdown code examples","text":"","tags":["markdown","reference"]},{"location":"documentation/markdown/reference/#inline-code","title":"inline code","text":"<p>Some <code>code</code> goes here.</p>","tags":["markdown","reference"]},{"location":"documentation/markdown/reference/#code-blocks","title":"code blocks","text":"<pre><code>echo env &gt; .bash_env\n</code></pre>","tags":["markdown","reference"]},{"location":"documentation/markdown/reference/#code-highlight-with-line-highlights","title":"code highlight with line highlights","text":"<pre><code>services:\n  nginx:\n    container_name: nginx\n    image: linuxserver/nginx\n    ports:\n      - 80:80\n</code></pre>","tags":["markdown","reference"]},{"location":"documentation/markdown/reference/#admonitions","title":"admonitions","text":"<p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>supported types beside \"note\"  https://squidfunk.github.io/mkdocs-material/reference/admonitions/#supported-types</p>","tags":["markdown","reference"]},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/category/windows/","title":"Windows","text":""},{"location":"blog/category/selfhosting/","title":"Selfhosting","text":""},{"location":"blog/category/gaming/","title":"Gaming","text":""},{"location":"blog/category/linux/","title":"Linux","text":""},{"location":"blog/page/2/","title":"Blog","text":""},{"location":"blog/page/3/","title":"Blog","text":""},{"location":"blog/archive/2024/page/2/","title":"2024","text":""},{"location":"blog/category/linux/page/2/","title":"Linux","text":""}]}